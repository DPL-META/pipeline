name: Custom Pipeline

on:
  push:
    branches:
      - main
      - develop

  pull_request:

  workflow_dispatch:

jobs:
build-and-push:
  runs-on: ubuntu-latest
  env:
    IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/products-app:latest
  steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Login to GitHub Container Registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Build Docker image
      run: docker build -t $IMAGE_NAME ./projects/products

    - name: Push image to GHCR
      run: docker push $IMAGE_NAME
test:
  runs-on: ubuntu-latest
  needs: build-and-push
  env:
    IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/products-app:latest
  steps:
    - name: Login to GitHub Container Registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Pull image
      run: docker pull $IMAGE_NAME

    - name: Run tests inside container
      run: docker run --rm $IMAGE_NAME poetry run pytest
deploy:
  runs-on: ubuntu-latest
  needs: test
  env:
    IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/products-app:latest
  steps:
    - name: Login to GitHub Container Registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Pull image
      run: docker pull $IMAGE_NAME

    - name: Simulate deploy
      run: |
        echo "ðŸ”§ Simulando deploy fictÃ­cio..."
        docker run -d -p 8000:8000 $IMAGE_NAME
        echo "âœ… AplicaÃ§Ã£o simulada em execuÃ§Ã£o"
